<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!-- Bottom Sheets Fragment -->
    <string name="fragment_bottom_sheets">Bottom sheets</string>
    <string name="fragment_bottom_sheets_txt">A bottom sheet is a sheet of paper that slides up from the bottom edge of the screen and presents a set of clear and simple actions.</string>
    <string name="fragment_bottom_sheets_usage">Usage</string>
    <string name="fragment_bottom_sheets_content">Content</string>
    <string name="fragment_bottom_sheets_behavior">Behavior</string>
    <string name="fragment_bottom_sheets_specs">Specs</string>

    <!-- Buttons Fragment -->
    <string name="fragment_buttons">Buttons</string>
    <string name="fragment_buttons_txt">A button clearly communicates what action will occur when the user touches it. It consists of text, an image, or both, designed in accordance with your app’s color theme.</string>
    <string name="fragment_buttons_usage">Usage</string>
    <string name="fragment_buttons_flat_and_raised_buttons">Flat &amp; raised buttons</string>
    <string name="fragment_buttons_other_buttons">Other buttons</string>

    <!-- Buttons Floating Action Button Fragment -->
    <string name="fragment_buttons_floating_action_button">Buttons: Floating Action Button</string>
    <string name="fragment_buttons_floating_action_button_floating_action_button">Floating Action Button</string>
    <string name="fragment_buttons_floating_action_button_behavior">Behavior</string>
    <string name="fragment_buttons_floating_action_button_transitions">Transitions</string>
    <string name="fragment_buttons_floating_action_button_large_screens">Large Screens</string>

    <!-- Cards Fragment -->
    <string name="fragment_cards">Cards</string>
    <string name="fragment_cards_txt">A card is a piece of paper with unique related data that serves as an entry point to more detailed information. For example, a card could contain a photo, text, and a link about a single subject.
        \n\nCards have a constant width and variable height. The maximum height is limited to the height of the available space on a platform, but it can temporarily expand (for example, to display a comment field). Cards do not flip over to reveal information on the back.
    </string>
    <string name="fragment_cards_usage">Usage</string>
    <string name="fragment_cards_content">Content</string>
    <string name="fragment_cards_actions">Actions</string>
    <string name="fragment_cards_behavior">Behavior</string>

    <!-- Chips Fragment -->
    <string name="fragment_chips">Chips</string>
    <string name="fragment_chips_txt">Chips represent complex entities in small blocks, such as a contact. They can contain a photo, short title string, and brief information.
        \n\nChips are manipulated through drag-and-drop. Touching them invokes the full view in a card or full screen view or invokes a menu of options related to that chip’s entity.
        \n\nAnimations invoked from chips should resize responsively across views for element persistence.
    </string>
    <string name="fragment_chips_contact_chips">Contact chips</string>

    <!-- Data Tables Fragment -->
    <string name="fragment_data_tables">Data tables</string>
    <string name="fragment_data_tables_txt">Data tables are used to present raw data sets, and usually appear in desktop enterprise products.
        \n\nData sets may include:
        \n\n• Three or more columns of data
        \n• A corresponding visualization
        \n• The ability for users to query and manipulate data at scale
    </string>
    <string name="fragment_data_tables_structure">Structure</string>
    <string name="fragment_data_tables_interaction">Interaction</string>
    <string name="fragment_data_tables_tables_within_cards">Tables within cards</string>
    <string name="fragment_data_tables_specs">Specs</string>

    <!-- Dialogs Fragment -->
    <string name="fragment_dialogs">Dialogs</string>
    <string name="fragment_dialogs_txt">Dialogs inform users about critical information, require users to make decisions, or encapsulate multiple tasks within a discrete process. Use dialogs sparingly because they are interruptive in nature. Their sudden appearance forces users to stop their current task and refocus on the dialog content. Not every choice, setting, or detail warrants interruption and prominence.
        \n\nAlternatives to dialogs include menus or inline expansion within the current content area. Both approaches present non-interruptive options while maintaining the current context.
    </string>
    <string name="fragment_dialogs_content">Content</string>
    <string name="fragment_dialogs_behavior">Behavior</string>
    <string name="fragment_dialogs_alerts">Alerts</string>
    <string name="fragment_dialogs_simple_menus">Simple menus</string>
    <string name="fragment_dialogs_simple_dialogs">Simple dialogs</string>
    <string name="fragment_dialogs_confirmation_dialogs">Confirmation dialogs</string>
    <string name="fragment_dialogs_full_screen_dialogs">Full-screen dialogs</string>
    <string name="fragment_dialogs_specs">Specs</string>

    <!-- Dividers Fragment -->
    <string name="fragment_dividers">Dividers</string>
    <string name="fragment_dividers_txt">Dividers group and separate content within lists and page layouts. The divider is a thin rule, lightweight yet sufficient to distinguish content visually and spatially.</string>
    <string name="fragment_dividers_usage">Usage</string>
    <string name="fragment_dividers_types_of_dividers">Types of dividers</string>
    <string name="fragment_dividers_specs">Specs</string>

    <!-- Grids Fragment -->
    <string name="fragment_grid_lists">Grid lists</string>
    <string name="fragment_grid_lists_txt">Grid lists are an alternative to standard list views. Grid lists are distinct from grids used for layouts and other visual presentations.</string>
    <string name="fragment_grid_lists_usage">Usage</string>
    <string name="fragment_grid_lists_content">Content</string>
    <string name="fragment_grid_lists_behavior">Behavior</string>
    <string name="fragment_grid_lists_specs">Specs</string>

    <!-- Lists Fragment -->
    <string name="fragment_lists">Lists</string>
    <string name="fragment_lists_txt">Lists present multiple line items in a vertical arrangement as a single continuous element.</string>
    <string name="fragment_lists_usage">Usage</string>
    <string name="fragment_lists_content">Content</string>
    <string name="fragment_lists_behavior">Behavior</string>
    <string name="fragment_lists_specs">Specs</string>

    <!-- Lists Controls Fragment -->
    <string name="fragment_lists_controls">Lists: Controls</string>
    <string name="fragment_lists_controls_txt">List controls are icons that appear to the left or right of the list text. They indicate the state of a list item, information about a list item, or serve as an action related to the list item. Leave-behinds are list controls, which are revealed only upon swipe.</string>
    <string name="fragment_lists_controls_usage">Usage</string>
    <string name="fragment_lists_controls_types_of_list_controls">Types of list controls</string>
    <string name="fragment_lists_controls_types_of_menu_controls">Types of menu controls</string>

    <!-- Menus Fragment -->
    <string name="fragment_menus">Menus</string>
    <string name="fragment_menus_txt">Menus allow users to take an action by selecting from a list of choices revealed upon opening a temporary, new sheet of material.</string>
    <string name="fragment_menus_usage">Usage</string>
    <string name="fragment_menus_menu_items">Menu items</string>
    <string name="fragment_menus_behavior">Behavior</string>
    <string name="fragment_menus_simple_menus">Simple Menus</string>
    <string name="fragment_menus_specs">Specs</string>

    <!-- Pickers Fragment -->
    <string name="fragment_pickers">Pickers</string>
    <string name="fragment_pickers_txt">Pickers provide a simple way to select a single value from a set.
        \n\nEach picker is a dialog with a set of controls for entering the units of the date (month, day, year) or time (hour, minute, AM/PM). Using these components in your app helps ensure that a user\'s specification of a date or time input is valid and formatted correctly. The format of a time and date picker adjusts automatically to the locale, i.e. month-day-year in the US and day-month-year in other regions.
        \n\nOn mobile, pickers are best suited for display in a dialog. For inline display, such as on a form, consider using compact controls such as text fields or dropdown menus.
    </string>
    <string name="fragment_pickers_date_pickers">Date pickers</string>
    <string name="fragment_pickers_time_pickers">Time pickers</string>

    <!-- Progress and Activity Fragment -->
    <string name="fragment_progress_and_activity">Progress &amp; activity</string>
    <string name="fragment_progress_and_activity_txt">Make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content. Each operation should only be represented by one activity indicator—for example, one refresh operation should not display both a refresh bar and an activity circle.</string>
    <string name="fragment_progress_and_activity_types_of_indicators">Types of indicators</string>
    <string name="fragment_progress_and_activity_behavior">Behavior</string>

    <!-- Selection Controls Fragment -->
    <string name="fragment_selection_controls">Selection controls</string>
    <string name="fragment_selection_controls_txt">Selection controls allow the user to select options. There are three kinds: checkboxes, radio buttons, and on/off switches.</string>
    <string name="fragment_selection_controls_checkbox">Checkbox</string>
    <string name="fragment_selection_controls_radio_button">Radio button</string>
    <string name="fragment_selection_controls_switch">Switch</string>

    <!-- Sliders Fragment -->
    <string name="fragment_sliders">Sliders</string>
    <string name="fragment_sliders_txt">Sliders let users select a value from a continuous or discrete range of values by moving the slider thumb. The smallest value is to the left, the largest to the right. Sliders can have icons to the left and right of the bar that reflect the value intensity. The interactive nature of the slider makes it a great choice for settings that reflect intensity levels, such as volume, brightness, or color saturation.</string>
    <string name="fragment_sliders_continuous_slider">Continuous slider</string>
    <string name="fragment_sliders_discrete_slider">Discrete slider</string>

    <!-- Snackbars and Toasts Fragment -->
    <string name="fragment_snackbars_and_toasts">Snackbars &amp; toasts</string>
    <string name="fragment_snackbars_and_toasts_txt">Snackbars provide lightweight feedback about an operation. They show a brief message at the bottom of the screen. Snackbars appear above most elements on screen, are equal in elevation to the floating action button, and lower in elevation to dialogs, bottom sheets, and navigation drawers. Snackbars can contain an action.
        \n\nSnackbars animate upwards from the bottom edge of the screen. They automatically disappear after a timeout or after user interaction elsewhere on the screen, particularly after interactions that summon a new surface or activity. Snackbars can be swiped off screen. They do not block input on the screens on which they appear. Show only one snackbar on screen at a time.
        \n\nAndroid also provides a toast, primarily used for system messaging. Toasts are similar to snackbars but do not contain actions and cannot be swiped off screen.
    </string>
    <string name="fragment_snackbars_and_toasts_usage">Usage</string>
    <string name="fragment_snackbars_and_toasts_specs">Specs</string>

    <!-- Subheaders Fragment -->
    <string name="fragment_subheaders">Subheaders</string>
    <string name="fragment_subheaders_txt">Subheaders are special list tiles that delineate distinct sections of a list or grid list and are typically related to the current filtering or sorting criteria. Subheader tiles are either displayed inline with tiles or can be associated with content, for example, in an adjacent column.
        \n\nUpon scrolling, subheaders remain pinned to the top of the screen until pushed on or off screen by the next subheader.
    </string>
    <string name="fragment_subheaders_list_subheaders">List subheaders</string>
    <string name="fragment_subheaders_grid_subheaders">Grid subheaders</string>
    <string name="fragment_subheaders_menu_subheaders">Menu subheaders</string>

    <!-- Tabs Fragment -->
    <string name="fragment_tabs">Tabs</string>
    <string name="fragment_tabs_txt">Tabs make it easy to explore and switch between different views or functional aspects of an app or to browse categorized data sets.</string>
    <string name="fragment_tabs_usage">Usage</string>
    <string name="fragment_tabs_content">Content</string>
    <string name="fragment_tabs_types_of_tabs">Types of tabs</string>
    <string name="fragment_tabs_specs">Specs</string>

    <!-- Text Fields Fragment -->
    <string name="fragment_text_fields">Text fields</string>
    <string name="fragment_text_fields_txt">Text fields allow the user to input text. They can be single line, with or without scrolling, or multi-line, and can have an icon. Touching a text field places the cursor and automatically displays the keyboard. In addition to typing, text fields allow for a variety of other tasks, such as text selection (cut, copy, paste) and data lookup via auto-completion. See Patterns > Selection for text selection design.
        \n\nThe type of text field determines what kind of characters are allowed inside the field and may prompt the virtual keyboard to optimize its layout for frequently used characters. Common types for which you should optimize include number, text, email address, phone number, person’s name, username, URL, street address, credit card number, PIN, and search query.
    </string>
    <string name="fragment_text_fields_single_line_text_field">Single-line text field</string>
    <string name="fragment_text_fields_floating_labels">Floating labels</string>
    <string name="fragment_text_fields_multi_line_text_field">Multi-line text field</string>
    <string name="fragment_text_fields_full_width_text_field">Full-width text field</string>
    <string name="fragment_text_fields_character_counter">Character counter</string>
    <string name="fragment_text_fields_auto_complete_text_field">Auto-complete text field</string>
    <string name="fragment_text_fields_search_filter">Search filter</string>

    <!-- Toolbars Fragment -->
    <string name="fragment_toolbars">Toolbars</string>
    <string name="fragment_toolbars_usage">Usage</string>

    <!-- Tooltips Fragment -->
    <string name="fragment_tooltips">Tooltips</string>
    <string name="fragment_tooltips_txt">Tooltips are labels that appear on hover and focus when the user hovers over an element with the cursor, focuses on an element using a keyboard (usually through the tab key), or upon touch (without releasing) in a touch UI. They contain textual identification for the element in question. They may also contain brief helper text regarding the function of the element. The label itself cannot receive input focus.</string>
    <string name="fragment_tooltips_usage">Usage</string>
    <string name="fragment_tooltips_tooltips">Tooltips</string>

</resources>