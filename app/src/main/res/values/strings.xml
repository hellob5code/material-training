<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Material Design Training</string>
    <string name="hello_world">Hello world!</string>

    <!-- Menu -->
    <string name="txt_search">Search</string>
    <string name="txt_settings">Settings</string>
    <string name="txt_validate">Validate</string>
    <string name="txt_send">Send</string>

    <!-- Navigation Drawer -->
    <string name="navdrawer_group_material_design">Material Design</string>
    <string name="navdrawer_child_introduction">Introduction</string>
    <string name="navdrawer_group_what_is_material">What is material?</string>
    <string name="navdrawer_child_environment">Environment</string>
    <string name="navdrawer_child_material_properties">Material properties</string>
    <string name="navdrawer_child_objects_in_3d_space">Objects in 3D space</string>
    <string name="navdrawer_group_animation">Animation</string>
    <string name="navdrawer_child_authentic_motion">Authentic motion</string>
    <string name="navdrawer_child_responsive_interaction">Responsive interaction</string>
    <string name="navdrawer_child_meaningful_transitions">Meaningful transitions</string>
    <string name="navdrawer_child_delightful_details">Delightful details</string>
    <string name="navdrawer_group_style">Style</string>
    <string name="navdrawer_child_color">Color</string>
    <string name="navdrawer_child_icons">Icons</string>
    <string name="navdrawer_child_imagery">Imagery</string>
    <string name="navdrawer_child_typography">Typography</string>
    <string name="navdrawer_group_layout">Layout</string>
    <string name="navdrawer_child_principles">Principles</string>
    <string name="navdrawer_child_units_and_measurements">Units and measurements</string>
    <string name="navdrawer_child_metrics_and_keylines">Metrics &amp; keylines</string>
    <string name="navdrawer_child_structure">Structure</string>
    <string name="navdrawer_group_components">Components</string>
    <string name="navdrawer_child_bottom_sheets">Bottom sheets</string>
    <string name="navdrawer_child_buttons">Buttons</string>
    <string name="navdrawer_child_buttons_floating_action_button">Buttons: Floating Action Button</string>
    <string name="navdrawer_child_cards">Cards</string>
    <string name="navdrawer_child_chips">Chips</string>
    <string name="navdrawer_child_data_tables">Data tables</string>
    <string name="navdrawer_child_dialogs">Dialogs</string>
    <string name="navdrawer_child_dividers">Dividers</string>
    <string name="navdrawer_child_grid_lists">Grid Lists</string>
    <string name="navdrawer_child_lists">Lists</string>
    <string name="navdrawer_child_lists_controls">Lists: Controls</string>
    <string name="navdrawer_child_menus">Menus</string>
    <string name="navdrawer_child_pickers">Pickers</string>
    <string name="navdrawer_child_progress_and_activity">Progress &amp; activity</string>
    <string name="navdrawer_child_selection_controls">Selection controls</string>
    <string name="navdrawer_child_sliders">Sliders</string>
    <string name="navdrawer_child_snackbars_and_toasts">Snackbars &amp; toasts</string>
    <string name="navdrawer_child_subheaders">Subheaders</string>
    <string name="navdrawer_child_tabs">Tabs</string>
    <string name="navdrawer_child_text_fields">Text fields</string>
    <string name="navdrawer_child_toolbars">Toolbars</string>
    <string name="navdrawer_child_tooltips">Tooltips</string>
    <string name="navdrawer_group_patterns">Patterns</string>
    <string name="navdrawer_child_app_structure">App structure</string>
    <string name="navdrawer_child_data_formats">Data formats</string>
    <string name="navdrawer_child_errors">Errors</string>
    <string name="navdrawer_child_gestures">Gestures</string>
    <string name="navdrawer_child_loading_images">Loading images</string>
    <string name="navdrawer_child_navigation_drawer">Navigation drawer</string>
    <string name="navdrawer_child_navigational_transitions">Navigational transitions</string>
    <string name="navdrawer_child_scrolling_techniques">Scrolling techniques</string>
    <string name="navdrawer_child_search">Search</string>
    <string name="navdrawer_child_selection">Selection</string>
    <string name="navdrawer_child_settings">Settings</string>
    <string name="navdrawer_child_swipe_to_refresh">Swipe to refresh</string>
    <string name="navdrawer_group_usability">Usability</string>
    <string name="navdrawer_child_accessibility">Accessibility</string>
    <string name="navdrawer_child_bidirectionality">Bidirectionality</string>
    <string name="navdrawer_group_resources">Resources</string>
    <string name="navdrawer_child_color_palettes">Color palettes</string>
    <string name="navdrawer_child_layout_templates">Layout templates</string>
    <string name="navdrawer_child_roboto_and_noto_fonts">Roboto &amp; Noto fonts</string>
    <string name="navdrawer_child_sticker_sheets_and_icons">Sticker sheets &amp; icons</string>
    <string name="navdrawer_group_whats_new">What\'s new</string>
    <string name="navdrawer_child_whats_new">What\'s new</string>
    <string name="navdrawer_item_settings">Settings</string>
    <string name="navdrawer_item_developer_mode">Developer Mode</string>

    <!-- Introduction Fragment -->
    <string name="fragment_introduction">Introduction</string>
    <string name="fragment_introduction_txt">We challenged ourselves to create a visual language for our users that synthesizes the classic principles of good design with the innovation and possibility of technology and science. This is material design. This spec is a living document that will be updated as we continue to develop the tenets and specifics of material design.</string>
    <string name="fragment_introduction_goals">Goals</string>
    <string name="fragment_introduction_goals_txt">Create a visual language that synthesizes classic principles of good design with the innovation and possibility of technology and science.
        \n\nDevelop a single underlying system that allows for a unified experience across platforms and device sizes. Mobile precepts are fundamental, but touch, voice, mouse, and keyboard are all ﬁrst-class input methods.
    </string>
    <string name="fragment_introduction_principles">Principles</string>
    <string name="fragment_introduction_principles_txt"><b>Material is the metaphor</b>
        \n\nA material metaphor is the unifying theory of a rationalized space and a system of motion. The material is grounded in tactile reality, inspired by the study of paper and ink, yet technologically advanced and open to imagination and magic.
        \n\nSurfaces and edges of the material provide visual cues that are grounded in reality. The use of familiar tactile attributes helps users quickly understand affordances. Yet the flexibility of the material creates new affordances that supercede those in the physical world, without breaking the rules of physics.
        \n\nThe fundamentals of light, surface, and movement are key to conveying how objects move, interact, and exist in space and in relation to each other. Realistic lighting shows seams, divides space, and indicates moving parts.
        \n\n<b>Bold, graphic, intentional</b>
        \n\nThe foundational elements of print-based design—typography, grids, space, scale, color, and use of imagery—guide visual treatments. These elements do far more than please the eye. They create hierarchy, meaning, and focus. Deliberate color choices, edge-to-edge imagery, large-scale typography, and intentional white space create a bold and graphic interface that immerse the user in the experience.
        \n\nAn emphasis on user actions makes core functionality immediately apparent and provides waypoints for the user.
        \n\n<b>Motion provides meaning</b>
        \n\nMotion respects and reinforces the user as the prime mover. Primary user actions are inflection points that initiate motion, transforming the whole design.
        \n\nAll action takes place in a single environment. Objects are presented to the user without breaking the continuity of experience even as they transform and reorganize.
        \n\nMotion is meaningful and appropriate, serving to focus attention and maintain continuity. Feedback is subtle yet clear. Transitions are efﬁcient yet coherent.
    </string>

    <!-- Environment Fragment -->
    <string name="fragment_environment">Environment</string>
    <string name="fragment_environment_3d_world">3D world</string>
    <string name="fragment_environment_3d_world_txt">The material environment is a 3D space, which means all objects have x, y, and z dimensions. The z-axis is perpendicularly aligned to the plane of the display, with the positive z-axis extending towards the viewer. Every sheet of material occupies a single position along the z-axis and has a standard 1dp thickness.
        \n\nOn the web, the z-axis is used for layering and not perspective, so the 3D world is emulated by manipulating the y-axis.
    </string>
    <string name="fragment_environment_light_and_shadow">Light and shadow</string>
    <string name="fragment_environment_light_and_shadow_txt">Within the material environment, virtual lights illuminate the scene. Key lights create directional shadows, while ambient light creates soft shadows from all angles.
        \n\nShadows in the material environment are cast by these two light sources. In Android development, shadows occur when light sources are blocked by sheets of material at various positions along the z-axis. On the web, shadows are depicted by manipulating the y-axis only.
    </string>

    <!-- Material Properties Fragment -->
    <string name="fragment_material_properties">Material properties</string>
    <string name="fragment_material_properties_txt">Material has certain immutable characteristics and inherent behaviors. Understanding these qualities will help you manipulate material in a way that’s consistent with the vision of material design.</string>
    <string name="fragment_material_properties_physical_properties">Physical properties</string>
    <string name="fragment_material_properties_physical_properties_txt">Material has <b>varying x &amp; y dimensions</b> (measured in dps) and a <b>uniform thickness</b> (1dp).
        \n\nMaterial casts shadows.
        \n\nShadows result naturally from the relative elevation (z-position) between material elements.
        \n\nContent is displayed on material, in any shape and color. Content does not add thickness to material.
        \n\nContent can behave independently of the material, but is limited within the bounds of the material.
        \n\nMaterial is solid.
        \n\nInput events cannot pass through material.
        \n\nMultiple material elements cannot occupy the same dimension in space simultaneously.
        \n\nMaterial cannot pass through other material.
        \n\nFor example, one sheet of material cannot pass through another sheet of material when changing elevation.
    </string>
    <string name="fragment_material_properties_transforming_material">Transforming material</string>
    <string name="fragment_material_properties_transforming_material_txt">Material can change shape.
        \n\nMaterial grows and shrinks only along its plane.
        \n\nMaterial never bends or folds.
        \n\nSheets of material can join together to become a single sheet of material.
        \n\nWhen split, material can heal. For example, if you remove a portion of material from a sheet of material, the sheet of material will become a whole sheet again.
    </string>
    <string name="fragment_material_properties_movement_of_material">Movement of material</string>
    <string name="fragment_material_properties_movement_of_material_txt">Material can be spontaneously generated or destroyed anywhere in the environment.
        \n\nMaterial can move along any axis.
        \n\nZ-axis motion is typically a result of user interaction with material.
    </string>

    <!-- Objects in 3D Space Fragment -->
    <string name="fragment_objects_in_3d_space">Objects in 3D space</string>
    <string name="fragment_objects_in_3d_space_txt">Objects in material design possess similar qualities to objects in the physical world. In the physical world, objects can be stacked or affixed to one another, but cannot pass through one another. Objects cast shadows and reflect light.
        \n\nThese qualities form a spatial model that is familiar to users and can be applied consistently across apps.
    </string>
    <string name="fragment_objects_in_3d_space_elevation_android">Elevation (Android)</string>
    <string name="fragment_objects_in_3d_space_elevation_android_txt">Elevation is the relative distance between two surfaces along the z-axis. A child object\'s elevation is relative to the parent object\'s elevation.
        \n\nElevation is measured in the same units as the x and y axes, typically in density-independent pixels (dp). Since material has a standard 1dp thickness, all elevations are measured in the distance from the top of one surface to the top of another surface.
        \n\nThe images and values shown are for Android apps.
        \n\n<b>Resting elevation</b>
        \n\nAll material objects have a resting elevation, or default elevation, whether the object is a small component or a sheet that spans the entire display.
        \n\nThe resting elevation for an object does not change; it is constant throughout an app. If an object changes elevation, it should return to its resting elevation as soon as possible.
        \n\nThe resting elevation for a component type is consistent across apps. However, components may have different resting elevations across platforms, depending on the depth of the environment (e.g., TV has a greater depth than mobile or desktop).
        \n\n<b>Responsive elevation and dynamic elevation offsets</b>
        \n\nSome component types have <b>responsive elevation</b>, meaning they change elevation in response to user input (e.g., normal, focused, and pressed) or system events. These elevation changes are consistently implemented using dynamic elevation offsets.
        \n\n<b>Dynamic elevation offsets</b> are the goal elevation for the component to move towards, relative to the component’s resting state. They also ensure that elevation changes are consistent across actions and component types. For example, all components that lift on press have the same elevation change relative to their resting elevation, and toolbars that lift to allow material to slide under them have consistent offsets.
        \n\nOnce the input event is completed or cancelled, the component will return to its resting elevation.
        \n\n<b>Functional shadows</b>
        \n\nShadows provide important visual cues about objects’ depth and directional movement. They are the only visual cue indicating the amount of separation between surfaces. An object’s elevation determines the appearance of its shadow.
        \n\nIn motion, shadows are a useful tool to provide cues about an object’s direction of movement and whether the distance between surfaces is increasing or decreasing.
    </string>
    <string name="fragment_objects_in_3d_space_object_relationships">Object relationships</string>
    <string name="fragment_objects_in_3d_space_object_relationships_txt"><b>Object hierarchy</b>
        \n\nHow you organize objects, or collections of objects, in an app determines how they move in relation to one another. Objects can move independently of each other or be constrained by objects higher in the hierarchy.
        \n\nAll objects are part of a hierarchy described in terms of a parent-child relationships. The “child” in each of these relationships refers to an element that is a subordinate to its “parent” element. Objects can be children of either the system or another object.
        \n\nParent-child specifics:
        \n\n• Each object has one parent.
        \n• Each object may have any number of children.
        \n• Children inherit transformative properties from their parent, such as position, rotation, scale, and elevation.
        \n• Siblings are objects at the same level of hierarchy.
        \n\n<b>Exceptions</b>
        \n\nItems parented to the root, such as primary UI elements, move independently of other objects. For example, the floating action button does not scroll with content. Other elements include:
        \n\n• An app’s side nav drawer
        \n• The action bar
        \n• Dialogs
        \n\n<b>Interaction</b>
        \n\nHow objects interact with one another is determined by their place in the parent-child hierarchy.
        \n\nFor example:
        \n\n• Children have minimal z-axis separation from their parent; other objects do not get inserted between parents and children.
        \n• In a scrolling card collection, the cards are siblings of each other, so they all move together in tandem. They are children of the card collection object that controls their movement.
        \n\n<b>Elevation</b>
        \n\nHow you determine the elevation of objects—their position in z-space—depends on the content hierarchy you want to express and whether an object needs to move independently of other objects.
    </string>

    <!-- Authentic Motion Fragment -->
    <string name="fragment_authentic_motion">Authentic motion</string>
    <string name="fragment_authentic_motion_txt">Just as the shape of an object indicates how it might behave, watching an object move demonstrates whether it’s light or heavy, flexible or rigid, small or large. In the world of material design, motion describes spatial relationships, functionality, and intention with beauty and fluidity.</string>

    <!-- Authentic Motion Fragment -->
    <string name="fragment_responsive_interaction">Responsive interaction</string>
    <string name="fragment_responsive_interaction_txt">Apps that practice responsive interaction produce timely, logical, and delightful screen reactions for their users. Each interaction is thoughtful, perhaps whimsical, but never distracting. Responsive interaction encourages deeper exploration of an app. What will happen if I touch this screen? And then this icon?</string>

    <!-- Meaningful Transitions Fragment -->
    <string name="fragment_meaningful_transitions">Meaningful transitions</string>
    <string name="fragment_meaningful_transitions_txt">Motion design can effectively guide the user’s attention in ways that both inform and delight. Use motion to smoothly transport users between navigational contexts, explain changes in the arrangement of elements on a screen, and reinforce element hierarchy.</string>

    <!-- Delightful Details Fragment -->
    <string name="fragment_delightful_details">Delightful details</string>
    <string name="fragment_delightful_details_txt">Animation can exist within all components of an app and at all scales, from finely detailed icons to key transitions and actions. All elements work together to construct a seamless experience and a beautiful, functional app.
        \n\nThe most basic use of animation is in transitions, but an app can truly delight a user when animation is used in ways beyond the obvious. A menu icon that becomes an arrow or playback controls that smoothly change from one to the other serve dual functions: to inform the user and to imbue your app with a moment of wonder and a sense of superb craftsmanship. Users do notice such small details.
    </string>

    <!-- Color Fragment -->
    <string name="fragment_color">Color</string>
    <string name="fragment_color_txt">Color in material design is inspired by bold hues juxtaposed with muted environments, deep shadows, and bright highlights. Material takes cues from contemporary architecture, road signs, pavement marking tape, and athletic courts. Color should be unexpected and vibrant.</string>

    <!-- Icons Fragment -->
    <string name="fragment_icons">Icons</string>
    <string name="fragment_icons_product_icons">Product icons</string>
    <string name="fragment_icons_system_icons">System icons</string>

    <!-- Imagery Fragment -->
    <string name="fragment_imagery">Imagery</string>
    <string name="fragment_imagery_txt">Imagery is more than decoration. It’s a powerful tool to help you communicate and differentiate your product. Bold, graphic, and intentional imagery helps to engage the user.
        \n\nWhether the mood is subdued and muted or bright and colorful, the following principles and best practices can help you successfully incorporate imagery and bring your apps to life, no matter what the visual brand.
    </string>

    <!-- Typography Fragment -->
    <string name="fragment_typography">Typography</string>
    <string name="fragment_typography_txt">Since the Ice Cream Sandwich release, Roboto has been the standard typeface on Android. Since Froyo, Noto has been the standard typeface on Android for all languages not covered by Roboto. Noto is also the standard typeface for all languages on Chrome OS.</string>

    <!-- Principles Fragment -->
    <string name="fragment_principles">Principles</string>
    <string name="fragment_principles_txt">Material design is guided by print-based design elements—such as typography, grids, space, scale, color, and imagery—to create hierarchy, meaning, and focus that immerse one in the experience. Material design adopts tools from the field of print design, like baseline grids and structural templates, that repeat across various pages. These layouts scale to fit any screen size, which simplifies the process of creating scalable apps.
        \n\nThese layouts encourage consistency by repeating visual elements, structural grids, and spacing across platforms and screen sizes. This consistency creates a familiar experience for users across environments.
    </string>

    <!-- Units and Measurements Fragment -->
    <string name="fragment_units_and_measurements">Units &amp; measurements</string>
    <string name="fragment_units_and_measurements_txt">Some units have different meanings in different contexts. This chapter discusses the usage of device-independent pixels, scaleable pixels, as well as concepts like pixel density.</string>

    <!-- Metrics and Keylines Fragment -->
    <string name="fragment_metrics_and_keylines">Metrics &amp; keylines</string>

    <!-- Structure Fragment -->
    <string name="fragment_structure">Structure</string>

    <!-- Bottom Sheets Fragment -->
    <string name="fragment_bottom_sheets">Bottom sheets</string>
    <string name="fragment_bottom_sheets_txt">A bottom sheet is a sheet of paper that slides up from the bottom edge of the screen and presents a set of clear and simple actions.</string>
    <string name="fragment_bottom_sheets_list_style">List-style</string>
    <string name="fragment_bottom_sheets_grid_style">Grid-style</string>

    <!-- Buttons Fragment -->
    <string name="fragment_buttons">Buttons</string>
    <string name="fragment_buttons_txt">A button clearly communicates what action will occur when the user touches it. It consists of text, an image, or both, designed in accordance with your app’s color theme.</string>
    <string name="fragment_buttons_buttons_in_dialogs">Buttons in dialogs</string>
    <string name="fragment_buttons_buttons_inline">Buttons inline</string>
    <string name="fragment_buttons_persistent_footer_buttons">Persistent footer buttons</string>
    <string name="fragment_buttons_raised_buttons">Raised buttons</string>
    <string name="fragment_buttons_flat_buttons">Flat buttons</string>

    <!-- Buttons Floating Action Button Fragment -->
    <string name="fragment_buttons_floating_action_button">Buttons: Floating Action Button</string>

    <!-- Cards Fragment -->
    <string name="fragment_cards">Cards</string>
    <string name="fragment_cards_txt">A card is a piece of paper with unique related data that serves as an entry point to more detailed information. For example, a card could contain a photo, text, and a link about a single subject.
        \n\nCards have a constant width and variable height. The maximum height is limited to the height of the available space on a platform, but it can temporarily expand (for example, to display a comment field). Cards do not flip over to reveal information on the back.
    </string>

    <!-- Chips Fragment -->
    <string name="fragment_chips">Chips</string>
    <string name="fragment_chips_txt">Chips represent complex entities in small blocks, such as a contact. They can contain a photo, short title string, and brief information.
        \n\nChips are manipulated through drag-and-drop. Touching them invokes the full view in a card or full screen view or invokes a menu of options related to that chip’s entity.
        \n\nAnimations invoked from chips should resize responsively across views for element persistence.
    </string>

    <!-- Data Tables Fragment -->
    <string name="fragment_data_tables">Data tables</string>
    <string name="fragment_data_tables_txt">Data tables are used to present raw data sets, and usually appear in desktop enterprise products.
        \n\nData sets may include:
        \n\n• Three or more columns of data
        \n• A corresponding visualization
        \n• The ability for users to query and manipulate data at scale
    </string>

    <!-- Dialogs Fragment -->
    <string name="fragment_dialogs">Dialogs</string>
    <string name="fragment_dialogs_txt">Dialogs inform users about critical information, require users to make decisions, or encapsulate multiple tasks within a discrete process. Use dialogs sparingly because they are interruptive in nature. Their sudden appearance forces users to stop their current task and refocus on the dialog content. Not every choice, setting, or detail warrants interruption and prominence.
        \n\nAlternatives to dialogs include menus or inline expansion within the current content area. Both approaches present non-interruptive options while maintaining the current context.
    </string>

    <!-- Dividers Fragment -->
    <string name="fragment_dividers">Dividers</string>
    <string name="fragment_dividers_txt">Dividers group and separate content within lists and page layouts. The divider is a thin rule, lightweight yet sufficient to distinguish content visually and spatially.</string>

    <!-- Grids Fragment -->
    <string name="fragment_grids">Grids</string>
    <string name="fragment_grids_txt">Grid lists are an alternative to standard list views. Grid lists are distinct from grids used for layouts and other visual presentations.</string>

    <!-- Lists Fragment -->
    <string name="fragment_lists">Lists</string>
    <string name="fragment_lists_txt">Lists present multiple line items in a vertical arrangement as a single continuous element.</string>

    <!-- Lists Controls Fragment -->
    <string name="fragment_lists_controls">Lists: Controls</string>
    <string name="fragment_lists_controls_txt">List controls are icons that appear to the left or right of the list text. They indicate the state of a list item, information about a list item, or serve as an action related to the list item. Leave-behinds are list controls, which are revealed only upon swipe.</string>

    <!-- Menus Fragment -->
    <string name="fragment_menus">Menus</string>
    <string name="fragment_menus_txt">Menus allow users to take an action by selecting from a list of choices revealed upon opening a temporary, new sheet of material.</string>

    <!-- Pickers Fragment -->
    <string name="fragment_pickers">Pickers</string>
    <string name="fragment_pickers_txt">Pickers provide a simple way to select a single value from a set.
        \n\nEach picker is a dialog with a set of controls for entering the units of the date (month, day, year) or time (hour, minute, AM/PM). Using these components in your app helps ensure that a user\'s specification of a date or time input is valid and formatted correctly. The format of a time and date picker adjusts automatically to the locale, i.e. month-day-year in the US and day-month-year in other regions.
        \n\nOn mobile, pickers are best suited for display in a dialog. For inline display, such as on a form, consider using compact controls such as text fields or dropdown menus.
    </string>

    <!-- Progress and Activity Fragment -->
    <string name="fragment_progress_and_activity">Progress &amp; activity</string>
    <string name="fragment_progress_and_activity_txt">Make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content. Each operation should only be represented by one activity indicator—for example, one refresh operation should not display both a refresh bar and an activity circle.</string>

    <!-- Selection Controls Fragment -->
    <string name="fragment_selection_controls">Selection controls</string>
    <string name="fragment_selection_controls_txt">Selection controls allow the user to select options. There are three kinds: checkboxes, radio buttons, and on/off switches.</string>

    <!-- Sliders Fragment -->
    <string name="fragment_sliders">Sliders</string>
    <string name="fragment_sliders_txt">Sliders let users select a value from a continuous or discrete range of values by moving the slider thumb. The smallest value is to the left, the largest to the right. Sliders can have icons to the left and right of the bar that reflect the value intensity. The interactive nature of the slider makes it a great choice for settings that reflect intensity levels, such as volume, brightness, or color saturation.</string>

    <!-- Snackbars and Toasts Fragment -->
    <string name="fragment_snackbars_and_toasts">Snackbars &amp; toasts</string>
    <string name="fragment_snackbars_and_toasts_txt">Snackbars provide lightweight feedback about an operation. They show a brief message at the bottom of the screen. Snackbars appear above most elements on screen, are equal in elevation to the floating action button, and lower in elevation to dialogs, bottom sheets, and navigation drawers. Snackbars can contain an action.
        \n\nSnackbars animate upwards from the bottom edge of the screen. They automatically disappear after a timeout or after user interaction elsewhere on the screen, particularly after interactions that summon a new surface or activity. Snackbars can be swiped off screen. They do not block input on the screens on which they appear. Show only one snackbar on screen at a time.
        \n\nAndroid also provides a toast, primarily used for system messaging. Toasts are similar to snackbars but do not contain actions and cannot be swiped off screen.
    </string>

    <!-- Subheaders Fragment -->
    <string name="fragment_subheaders">Subheaders</string>
    <string name="fragment_subheaders_txt">Subheaders are special list tiles that delineate distinct sections of a list or grid list and are typically related to the current filtering or sorting criteria. Subheader tiles are either displayed inline with tiles or can be associated with content, for example, in an adjacent column.
        \n\nUpon scrolling, subheaders remain pinned to the top of the screen until pushed on or off screen by the next subheader.
    </string>

    <!-- Tabs Fragment -->
    <string name="fragment_tabs">Tabs</string>
    <string name="fragment_tabs_txt">Tabs make it easy to explore and switch between different views or functional aspects of an app or to browse categorized data sets.</string>

    <!-- Text Fields Fragment -->
    <string name="fragment_text_fields">Text fields</string>
    <string name="fragment_text_fields_txt">Text fields allow the user to input text. They can be single line, with or without scrolling, or multi-line, and can have an icon. Touching a text field places the cursor and automatically displays the keyboard. In addition to typing, text fields allow for a variety of other tasks, such as text selection (cut, copy, paste) and data lookup via auto-completion. See Patterns > Selection for text selection design.
        \n\nThe type of text field determines what kind of characters are allowed inside the field and may prompt the virtual keyboard to optimize its layout for frequently used characters. Common types for which you should optimize include number, text, email address, phone number, person’s name, username, URL, street address, credit card number, PIN, and search query.
    </string>
    <string name="fragment_text_fields_single_line_text_field">Single-line text field</string>
    <string name="fragment_text_fields_floating_labels">Floating labels</string>
    <string name="fragment_text_fields_multi_line_text_field">Multi-line text field</string>
    <string name="fragment_text_fields_full_width_text_field">Full-width text field</string>
    <string name="fragment_text_fields_character_counter">Character counter</string>
    <string name="fragment_text_fields_auto_complete_text_field">Auto-complete text field</string>
    <string name="fragment_text_fields_search_filter">Search filter</string>

    <!-- Toolbars Fragment -->
    <string name="fragment_toolbars">Toolbars</string>

    <!-- Tooltips Fragment -->
    <string name="fragment_tooltips">Tooltips</string>
    <string name="fragment_tooltips_txt">Tooltips are labels that appear on hover and focus when the user hovers over an element with the cursor, focuses on an element using a keyboard (usually through the tab key), or upon touch (without releasing) in a touch UI. They contain textual identification for the element in question. They may also contain brief helper text regarding the function of the element. The label itself cannot receive input focus.</string>

    <!-- App Structure Fragment -->
    <string name="fragment_app_structure">App structure</string>
    <string name="fragment_app_structure_txt">Your app\'s structure is informed by the content and tasks you want to surface for your users. For example, your app could:
        \n\n• Focus on a single activity (such as a calculator or game)
        \n• Contain limited navigation (such as a phone dialer with favorites and contacts)
        \n• Contain complex data views and deep navigation (such as a mail app with folders)
    </string>
    <string name="fragment_app_structure_start_screen">Start screen</string>
    <string name="fragment_app_structure_top_level_navigation_strategies">Top-level navigation strategies</string>
    <string name="fragment_app_structure_combining_navigation_strategies">Combining navigation strategies</string>

    <!-- Data Formats Fragment -->
    <string name="fragment_data_formats">Data formats</string>
    <string name="fragment_data_formats_txt">These guidelines apply to US English content only.
        \n\nThe libraries used to generate date and time formats for other languages may differ.
    </string>
    <string name="fragment_data_formats_date_and_time">Date &amp; time</string>
    <string name="fragment_data_formats_data_redaction_and_truncation">Data redaction and truncation</string>

    <!-- Errors Fragment -->
    <string name="fragment_errors">Errors</string>
    <string name="fragment_errors_txt">Errors occur when an app fails to complete what is expected. Errors happen when:
        \n\n• The app does not understand user input
        \n• The system or app fails
        \n• A user intends to run incompatible operations concurrently
        \n\nMinimize errors by designing apps that make it easy for users to input information flexibly. Apps should accept common data formats use affordances to improve user understanding.
        \n\nWhen an error occurs:
        \n\n• Clearly communicate what is happening
        \n• Describe how a user can resolve it
        \n• Preserve as much user-entered input as possible
    </string>
    <string name="fragment_errors_user_input_errors">User input errors</string>
    <string name="fragment_errors_app_errors">App errors</string>
    <string name="fragment_errors_incompatible_state_errors">Incompatible state errors</string>

    <!-- Gestures Fragment -->
    <string name="fragment_gestures">Gestures</string>
    <string name="fragment_gestures_txt">Gestures are divided into <b>Touch Mechanics</b> (what your fingers do on the screen) and <b>Touch Activities</b> (context-specific results of specific gestures in the user interface). A single touch mechanic (touch) may have multiple results depending on context (tap, cancel, enable/disable lights out), and a single touch activity (zoom in) may be achieved through multiple touch mechanics (pinch open, double touch, double-touch drag, etc.)
        \n\nNote that Drag, Swipe, and Fling gesture activities are covered in more detail in their own section due to their highly contextual results.
        \n\nThe information in this section is for mobile-only.
    </string>
    <string name="fragment_gestures_touch_mechanics">Touch mechanics</string>
    <string name="fragment_gestures_touch_activities">Touch activities</string>
    <string name="fragment_gestures_drag_swipe_or_fling_details">Drag, swipe, or fling details</string>

    <!-- Loading Images Fragment -->
    <string name="fragment_loading_images">Loading images</string>
    <string name="fragment_loading_images_loading_images">Loading images</string>

    <!-- Navigation Drawer Fragment -->
    <string name="fragment_navigation_drawer">Navigation drawer</string>
    <string name="fragment_navigation_drawer_txt">The navigation drawer is a common pattern found in Google apps. The navigation drawer slides in from the left. It follows the keylines and metrics for lists.</string>
    <string name="fragment_navigation_drawer_specs">Specs</string>
    <string name="fragment_navigation_drawer_content">Content</string>

    <!-- Navigational Transitions Fragment -->
    <string name="fragment_navigational_transitions">Navigational transitions</string>
    <string name="fragment_navigational_transitions_txt">Navigational transitions occur when the user is taken from one state to another within the app, such as moving from a high-level view to a detailed view or a task-completion view. Most transitions are hierarchical in nature, but non-hierarchical transitions also occur.
        \n\nThese brief moments are very important for the user experience. Consider the user’s journey carefully to determine which transition to use when. Different kinds of transitions are appropriate for various cases.
    </string>
    <string name="fragment_navigational_transitions_parent_to_child">Parent to child</string>
    <string name="fragment_navigational_transitions_sibling_to_sibling">Sibling to sibling</string>

    <!-- Scrolling Techniques Fragment -->
    <string name="fragment_scrolling_techniques">Scrolling techniques</string>
    <string name="fragment_scrolling_techniques_scrolling">Scrolling</string>

    <!-- Search Fragment -->
    <string name="fragment_search">Search</string>
    <string name="fragment_search_in_app_search">In-app search</string>

    <!-- Selection Fragment -->
    <string name="fragment_selection">Selection</string>
    <string name="fragment_selection_txt">A <b>long-press</b> (a touch or mousedown that’s held in the same position for a moment) is the global gesture to select data. On touch devices, a two-finger touch may also be used to trigger selection.
        \n\nThe use of checkboxes (or custom analogs) to initiate selection is not encouraged on mobile. For desktop, checkboxes may be used, with the following guidelines:
        \n\n• Avoid persistently displaying checkboxes as part of each item.
        \n• When hovering on an item, display a single checkbox for that item.
        \n• After an item has been selected, display checkboxes for all remaining items in that set.
        \n\nUsing checkboxes in contexts such as task lists or checklists, to checking an item indicates completion, rather than selection, is entirely appropriate.
    </string>
    <string name="fragment_selection_item_selection">Item selection</string>
    <string name="fragment_selection_text_selection">Text selection</string>

    <!-- Settings Fragment -->
    <string name="fragment_settings">Settings</string>
    <string name="fragment_settings_txt">Application settings let users indicate their preferences for how an app should behave. They grant the user a sense of control over apps and services in one consolidated location.</string>
    <string name="fragment_settings_flow_and_structure">Flow &amp; structure</string>
    <string name="fragment_settings_writing_guidelines">Writing guidelines</string>

    <!-- Swipe to Refresh Fragment -->
    <string name="fragment_swipe_to_refresh">Swipe to refresh</string>
    <string name="fragment_swipe_to_refresh_swipe_to_refresh">Swipe to refresh</string>

    <!-- Accessibility Fragment -->
    <string name="fragment_accessibility">Accessibility</string>
    <string name="fragment_accessibility_txt">A product is accessible when all people — regardless of ability — can navigate it, understand it, and use it to achieve their goals. A truly successful product is accessible to the widest possible audience.
        \n\nThese general guidelines are a good starting point for designers who want to learn about accessibility. Designing fully accessible products is a complex topic that requires in-depth study. For more info, visit the Google accessibility site.
        \n\nTo ensure that your product is usable for users with disabilities, consider how users will interact with your product using assistive technologies. Imagine using your product in the following ways:
        \n\n• Without sound
        \n• Without color
        \n• With the high contrast mode enabled
        \n• With the screen magnified
        \n• With a screen reader (no visible screen)
        \n• With voice control only
        \n• With a combination of the above
    </string>

    <!-- Bidirectionality Fragment -->
    <string name="fragment_bidirectionality">Bidirectionality</string>
    <string name="fragment_bidirectionality_txt">A well-designed app can be easily localized for language scripts that are written and read from left-to-right (LTR), such as English, and for <i>bidirectional</i> language scripts.
        \n\nIn bidirectional scripts, text is written and read from right-to-left, but numbers and embedded words from LTR languages, such as non-localized names, are written left-to-right (LTR). Bidirectional scripts include Arabic, Hebrew, and Persian.
        \n\nBidirectionality affects not only the layout of text and UI elements but also iconography. This section provides basic, high-level information about how to consider bidirectionality in design.
    </string>



    <!-- Compose Email Activity -->
    <string name="title_activity_compose_email">Compose</string>
    <string name="compose_email_hint_from">From</string>
    <string name="compose_email_hint_message">Message</string>
    <string name="compose_email_hint_subject">Subject</string>
    <string name="compose_email_hint_to">To</string>

    <!-- Developer Mode Activity -->
    <string name="title_activity_developer_mode">Developer Mode</string>

    <!-- Patterns Activity -->
    <string name="fragment_patterns_basic_displays">Basic displays</string>
    <string name="fragment_patterns_basic_1">For time, use uppercase AM or PM without periods, separated from time with a space.</string>
    <string name="fragment_patterns_basic_2">If a timestamp is within the current day, it’s generally unnecessary to show either “today”, the day or date. Only display the time in “hour:minute AM/PM” format.</string>
    <string name="fragment_patterns_basic_3">If the day is in the past or future within the current calendar year, display the abbreviated date.</string>
    <string name="fragment_patterns_basic_4">If the day is in the past or future outside of the current calendar year, display the abbreviated date and year.</string>
    <string name="fragment_patterns_basic_5">If the date is a range of time, separate with an en-dash without a space on either side.</string>
    <string name="fragment_patterns_basic_6">If both dates in a range start and end in the current year, omit the year. Otherwise, show the year on both the start and end.</string>
    <string name="fragment_patterns_basic_7">When a range shares a common AM/PM, append only on the end of the range.</string>
    <string name="fragment_patterns_basic_8">When listing the time zone, drop the leading 0 for single digits.</string>
    <string name="fragment_patterns_human_displays">Using human and relative language and approximate time</string>
    <string name="fragment_patterns_human_1">If the day is yesterday or tomorrow, use those terms</string>
    <string name="fragment_patterns_human_2">If the day is in the future and within a week, display the unabbreviated day of the week.</string>
    <string name="fragment_patterns_human_3">If a word alternative helps understanding or describes a time-of-day preset, display that alternative.</string>
    <string name="fragment_patterns_human_4">If absolute time isn’t necessary for specificity or comparison, you may choose to display approximate relative times.\nDon’t combine units (e.g. “1 hour 32 minutes ago”). Instead, round down to the most recent largest unit (e.g. “1 hour ago”).</string>
    <string name="fragment_patterns_human_5">Relative language may not always be appropriate, e.g. current date in a clock app, or the specific time of an event or alarm. In these cases, use absolute time.</string>
    <string name="fragment_patterns_modular_displays">Be modular</string>
    <string name="fragment_patterns_modular_1">Typically, future settings should append time to a day or date.</string>
    <string name="fragment_patterns_modular_2">When a past time is necessary, such as a triggered reminder, display both date and time.</string>
    <string name="fragment_patterns_modular_3">When the day of week is necessary, such as on a calendar invite, display the abbreviated day separated by a comma.</string>
    <string name="fragment_patterns_modular_4">When it’s an event in the distant past, omit the time.</string>
    <string name="fragment_patterns_modular_5">Use HH:MM:SS to show the duration of a recording, like audio or video. If hours or seconds don’t apply, then omit them.</string>
    <string name="fragment_patterns_brief_displays">Be modular</string>
    <string name="fragment_patterns_brief_1">Always abbreviate months, with single or double digit dates.</string>
    <string name="fragment_patterns_brief_2">Abbreviate days of the week when combined with a time.</string>
    <string name="fragment_patterns_brief_3">If real estate is limited (such as with timestamps, labels on graphs, durations, etc.) abbreviate units, using numerical versions and/or by removing the “:00”:</string>
    <string name="fragment_patterns_brief_4">If truncation of “tomorrow” or “yesterday” happens repeatedly, do not abbreviate. Instead, use the month date format.</string>

    <!-- Register Application Activity -->
    <string name="title_activity_register_application">Application</string>
    <string name="register_application_hint_title">Title</string>
    <string name="register_application_hint_price">Price</string>
    <string name="register_application_hint_location">Location (optional)</string>
    <string name="register_application_hint_description">Description</string>

    <!-- Register Contact Activity -->
    <string name="title_activity_register_contact">Contact</string>
    <string name="register_contact_hint_name">Full Name</string>
    <string name="register_contact_hint_phone">Phone number</string>
    <string name="register_contact_hint_email">Email</string>
    <string name="register_contact_hint_address">Address</string>
    <string name="register_contact_hint_ringtone">Ringtone</string>
    <string name="register_contact_hint_add_note">Add note</string>

    <!-- Register Event Activity -->
    <string name="title_activity_register_event">Event</string>
    <string name="register_event_hint_event_name">Event name</string>
    <string name="register_event_hint_from">From</string>
    <string name="register_event_hint_location">Location</string>
    <string name="register_event_hint_to">To</string>
    <string name="register_event_hint_timezone">Timezone</string>
    <string name="register_event_txt_all_day">All day</string>

    <!-- Register Note Activity -->
    <string name="title_activity_register_note">Note</string>
    <string name="register_note_hint_title">Title</string>
    <string name="register_note_hint_description">Description</string>
    <string name="register_note_hint_extra">More descriptive text</string>

    <!-- Searchable Activity -->
    <string name="title_activity_searchable">Searchable</string>
    <string name="searchable_hint_search">Search %1$s</string>

    <!-- Settings Activity -->
    <string name="title_activity_settings">Settings</string>

    <!-- System Icons Activity -->
    <string name="title_activity_system_icons">System icons</string>

    <!-- Tabs Activity -->
    <string name="title_activity_tabs">Page title</string>

    <!-- Accessibility Description -->
    <string name="content_descr_drawer_close">Close navigation drawer</string>
    <string name="content_descr_drawer_open">Open navigation drawer</string>
    <string name="content_descr_rich_media">Rich media</string>

</resources>
