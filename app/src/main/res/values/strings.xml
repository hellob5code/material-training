<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Material Design Training</string>
    <string name="hello_world">Hello world!</string>

    <!-- Menu -->
    <string name="txt_search">Search</string>
    <string name="txt_settings">Settings</string>
    <string name="txt_validate">Validate</string>
    <string name="txt_send">Send</string>

    <!-- Navigation Drawer -->
    <string name="navdrawer_group_material_design">Material Design</string>
    <string name="navdrawer_child_introduction">Introduction</string>
    <string name="navdrawer_group_what_is_material">What is material?</string>
    <string name="navdrawer_child_environment">Environment</string>
    <string name="navdrawer_child_material_properties">Material properties</string>
    <string name="navdrawer_child_objects_in_3d_space">Objects in 3D space</string>
    <string name="navdrawer_group_animation">Animation</string>
    <string name="navdrawer_child_authentic_motion">Authentic motion</string>
    <string name="navdrawer_child_responsive_interaction">Responsive interaction</string>
    <string name="navdrawer_child_meaningful_transitions">Meaningful transitions</string>
    <string name="navdrawer_child_delightful_details">Delightful details</string>
    <string name="navdrawer_group_style">Style</string>
    <string name="navdrawer_child_color">Color</string>
    <string name="navdrawer_child_icons">Icons</string>
    <string name="navdrawer_child_imagery">Imagery</string>
    <string name="navdrawer_child_typography">Typography</string>
    <string name="navdrawer_group_layout">Layout</string>
    <string name="navdrawer_child_principles">Principles</string>
    <string name="navdrawer_child_metrics_and_keylines">Metrics &amp; keylines</string>
    <string name="navdrawer_child_structure">Structure</string>
    <string name="navdrawer_group_components">Components</string>
    <string name="navdrawer_child_bottom_sheets">Bottom sheets</string>
    <string name="navdrawer_child_buttons">Buttons</string>
    <string name="navdrawer_child_cards">Cards</string>
    <string name="navdrawer_child_chips">Chips</string>
    <string name="navdrawer_child_dialogs">Dialogs</string>
    <string name="navdrawer_child_dividers">Dividers</string>
    <string name="navdrawer_child_grids">Grids</string>
    <string name="navdrawer_child_lists">Lists</string>
    <string name="navdrawer_child_list_controls">List controls</string>
    <string name="navdrawer_child_menus">Menus</string>
    <string name="navdrawer_child_pickers">Pickers</string>
    <string name="navdrawer_child_progress_and_activity">Progress &amp; activity</string>
    <string name="navdrawer_child_sliders">Sliders</string>
    <string name="navdrawer_child_snackbars_and_toasts">Snackbars &amp; toasts</string>
    <string name="navdrawer_child_subheaders">Subheaders</string>
    <string name="navdrawer_child_switches">Switches</string>
    <string name="navdrawer_child_tabs">Tabs</string>
    <string name="navdrawer_child_text_fields">Text fields</string>
    <string name="navdrawer_child_tooltips">Tooltips</string>
    <string name="navdrawer_group_patterns">Patterns</string>
    <string name="navdrawer_child_data_formats">Data formats</string>
    <string name="navdrawer_child_errors">Errors</string>
    <string name="navdrawer_child_gestures">Gestures</string>
    <string name="navdrawer_child_loading_images">Loading images</string>
    <string name="navdrawer_child_navigation_drawer">Navigation drawer</string>
    <string name="navdrawer_child_navigational_transitions">Navigational transitions</string>
    <string name="navdrawer_child_scrolling_techniques">Scrolling techniques</string>
    <string name="navdrawer_child_search">Search</string>
    <string name="navdrawer_child_selection">Selection</string>
    <string name="navdrawer_child_settings">Settings</string>
    <string name="navdrawer_child_swipe_to_refresh">Swipe to refresh</string>
    <string name="navdrawer_group_usability">Usability</string>
    <string name="navdrawer_child_accessibility">Accessibility</string>
    <string name="navdrawer_child_bidirectionality">Bidirectionality</string>
    <string name="navdrawer_group_resources">Resources</string>
    <string name="navdrawer_child_color_palettes">Color palettes</string>
    <string name="navdrawer_child_layout_templates">Layout templates</string>
    <string name="navdrawer_child_roboto_and_noto_fonts">Roboto &amp; Noto fonts</string>
    <string name="navdrawer_child_sticker_sheets_and_icons">Sticker sheets &amp; icons</string>
    <string name="navdrawer_group_whats_new">What\'s new</string>
    <string name="navdrawer_child_whats_new">What\'s new</string>
    <string name="navdrawer_item_settings">Settings</string>
    <string name="navdrawer_item_developer_mode">Developer Mode</string>

    <!-- Introduction Fragment -->
    <string name="fragment_introduction">Introduction</string>
    <string name="fragment_introduction_txt">We challenged ourselves to create a visual language for our users that synthesizes the classic principles of good design with the innovation and possibility of technology and science. This is material design. This spec is a living document that will be updated as we continue to develop the tenets and specifics of material design.</string>
    <string name="fragment_introduction_goals">Goals</string>
    <string name="fragment_introduction_goals_txt">Create a visual language that synthesizes classic principles of good design with the innovation and possibility of technology and science.
        \n\nDevelop a single underlying system that allows for a unified experience across platforms and device sizes. Mobile precepts are fundamental, but touch, voice, mouse, and keyboard are all ﬁrst-class input methods.
    </string>
    <string name="fragment_introduction_principles">Principles</string>
    <string name="fragment_introduction_principles_txt"><b>Material is the metaphor</b>
        \n\nA material metaphor is the unifying theory of a rationalized space and a system of motion. The material is grounded in tactile reality, inspired by the study of paper and ink, yet technologically advanced and open to imagination and magic.
        \n\nSurfaces and edges of the material provide visual cues that are grounded in reality. The use of familiar tactile attributes helps users quickly understand affordances. Yet the flexibility of the material creates new affordances that supercede those in the physical world, without breaking the rules of physics.
        \n\nThe fundamentals of light, surface, and movement are key to conveying how objects move, interact, and exist in space and in relation to each other. Realistic lighting shows seams, divides space, and indicates moving parts.
        \n\n<b>Bold, graphic, intentional</b>
        \n\nThe foundational elements of print-based design—typography, grids, space, scale, color, and use of imagery—guide visual treatments. These elements do far more than please the eye. They create hierarchy, meaning, and focus. Deliberate color choices, edge-to-edge imagery, large-scale typography, and intentional white space create a bold and graphic interface that immerse the user in the experience.
        \n\nAn emphasis on user actions makes core functionality immediately apparent and provides waypoints for the user.
        \n\n<b>Motion provides meaning</b>
        \n\nMotion respects and reinforces the user as the prime mover. Primary user actions are inflection points that initiate motion, transforming the whole design.
        \n\nAll action takes place in a single environment. Objects are presented to the user without breaking the continuity of experience even as they transform and reorganize.
        \n\nMotion is meaningful and appropriate, serving to focus attention and maintain continuity. Feedback is subtle yet clear. Transitions are efﬁcient yet coherent.
    </string>

    <!-- Environment Fragment -->
    <string name="fragment_environment">Environment</string>
    <string name="fragment_environment_3d_world">3D world</string>
    <string name="fragment_environment_3d_world_txt">The material environment is a 3D space, which means all objects have x, y, and z dimensions. The z-axis is perpendicularly aligned to the plane of the display, with the positive z-axis extending towards the viewer. Every sheet of material occupies a single position along the z-axis and has a standard 1dp thickness.</string>
    <string name="fragment_environment_light_and_shadow">Light and shadow</string>
    <string name="fragment_environment_light_and_shadow_txt">Within the material environment, virtual lights illuminate the scene and allow objects to cast shadows. A key light creates directional shadows, while an ambient light creates consistent, soft shadows from all angles.
        \n\nAll shadows in the material environment are cast by these two light sources. Shadows are the absence of light resulting from the occlusion of these light sources by sheets of material at various positions along the z-axis.
    </string>

    <!-- Material Properties Fragment -->
    <string name="fragment_material_properties">Material properties</string>
    <string name="fragment_material_properties_txt">Material has certain immutable characteristics and inherent behaviors. Understanding these qualities will help you manipulate material in a way that’s consistent with the vision of material design.</string>

    <!-- Objects In 3D Space Fragment -->
    <string name="fragment_objects_in_3d_space">Objects in 3D space</string>
    <string name="fragment_objects_in_3d_space_txt">There are parallels between organizing objects in the physical world and arranging objects in space in material design. In the physical world, objects can be stacked or affixed to one another, but cannot pass through one another. The objects cast shadows and reflect light.
        \n\nThese qualities apply to objects in material design and help create a spatial model that can be consistently applied across apps in ways that are familiar to users.
    </string>

    <!-- Authentic Motion Fragment -->
    <string name="fragment_authentic_motion">Authentic motion</string>
    <string name="fragment_authentic_motion_txt">Perceiving an object’s tangible form helps us understand how to manipulate it. Observing an object’s motion tells us whether it is light or heavy, flexible or rigid, small or large. Motion in the world of material design is not only beautiful, it builds meaning about the spatial relationships, functionality, and intention of the system.</string>

    <!-- Authentic Motion Fragment -->
    <string name="fragment_responsive_interaction">Responsive interaction</string>
    <string name="fragment_responsive_interaction_txt">Responsive interaction builds trust with the user and engages them. When a user interacts with an app and beautiful yet perfectly logical things happen, the user feels satisfied—even delighted. The interaction is thoughtful and purposeful, not random, and can be gently whimsical but never distracting. It encourages deeper exploration of an app. What will happen if I touch this? And then this?</string>

    <!-- Meaningful Transitions Fragment -->
    <string name="fragment_meaningful_transitions">Meaningful transitions</string>
    <string name="fragment_meaningful_transitions_txt">Sometimes, it is difficult for a user to know where to look or understand how an element got from point A to point B. Carefully choreographed motion design can effectively guide the user’s attention and focus through multiple steps of a process or procedure, avoid confusion when layouts change or elements are rearranged, and improve the overall beauty of the experience. Motion design should serve a functional purpose.</string>

    <!-- Delightful Details Fragment -->
    <string name="fragment_delightful_details">Delightful details</string>
    <string name="fragment_delightful_details_txt">Animation can exist within all components of an app and at all scales, from finely detailed icons to key transitions and actions. All elements work together to construct a seamless experience and a beautiful, functional app.
        \n\nThe most basic use of animation is in transitions, but an app can truly delight a user when animation is used in ways beyond the obvious. A menu icon that becomes an arrow or playback controls that smoothly change from one to the other serve dual functions: to inform the user and to imbue your app with a moment of wonder and a sense of superb craftsmanship. Users do notice such small details.
    </string>

    <!-- Color Fragment -->
    <string name="fragment_color">Color</string>
    <string name="fragment_color_txt">Color is inspired by bold color statements juxtaposed with muted environments, taking cues from contemporary architecture, road signs, pavement marking tape, and sports courts. Emphasize bold shadows and highlights. Introduce unexpected and vibrant colors.</string>

    <!-- Icons Fragment -->
    <string name="fragment_icons">Icons</string>
    <string name="fragment_icons_product_icons">Product icons</string>
    <string name="fragment_icons_system_icons">System icons</string>

    <!-- Imagery Fragment -->
    <string name="fragment_imagery">Imagery</string>
    <string name="fragment_imagery_txt">Imagery is more than decoration. It’s a powerful tool to help you communicate and differentiate your product. Bold, graphic, and intentional imagery helps to engage the user.
        \n\nWhether the mood is subdued and muted or bright and colorful, the following principles and best practices can help you successfully incorporate imagery and bring your apps to life, no matter what the visual brand.
    </string>

    <!-- Typography Fragment -->
    <string name="fragment_typography">Typography</string>

    <!-- Principles Fragment -->
    <string name="fragment_principles">Principles</string>
    <string name="fragment_principles_txt">Material design uses fundamental tools that have come from the world of print design, like baseline grids and a common set of structural grids that work across various pages. The layout is designed to scale across different screen sizes and will help facilitate UI development and ultimately help you create scalable apps.
        \n\nThe layout guidelines also encourage apps to have a consistent look and feel by using the same visual elements, structural grids, and general spacing rules across platforms and screen sizes. Structural and visual consistency creates an environment for the user that is recognizable across products, which provides users with a high level of familiarity and comfort.
        \n\nBefore delving into layout details, consider the rules of how the material behaves and how it is crafted.
    </string>

    <!-- Metrics And Keylines Fragment -->
    <string name="fragment_metrics_and_keylines">Metrics &amp; keylines</string>

    <!-- Structure Fragment -->
    <string name="fragment_structure">Structure</string>

    <!-- Bottom Sheets Fragment -->
    <string name="fragment_bottom_sheets">Bottom sheets</string>
    <string name="fragment_bottom_sheets_txt">One way to present a set of actions to a user is with a bottom sheet, a sheet of paper that slides up from the bottom edge of the screen. Bottom sheets offer flexibility in the display of clear and simple actions that do not need explanation.</string>
    <string name="fragment_bottom_sheets_list_style">List-style</string>
    <string name="fragment_bottom_sheets_grid_style">Grid-style</string>

    <!-- Buttons Fragment -->
    <string name="fragment_buttons">Buttons</string>
    <string name="fragment_buttons_txt">A button consists of text and/or an image that clearly communicates what action will occur when the user touches it. There are three types of main buttons:
        \n\n• Floating action button: a circular button made of paper that lifts and emits ink reactions on press.
        \n• Raised button: a typically rectangular button made of paper that lifts and emits ink reactions on press.
        \n• Flat button: a button made of ink that emits ink reactions on press but does not lift.
        \n\nIn addition, fully saturated icons in your design generally always denote affordances.
        \n\nButtons should be designed in accordance with your app’s color theme.
    </string>
    <string name="fragment_buttons_buttons_in_dialogs">Buttons in dialogs</string>
    <string name="fragment_buttons_buttons_inline">Buttons inline</string>
    <string name="fragment_buttons_persistent_footer_buttons">Persistent footer buttons</string>
    <string name="fragment_buttons_raised_buttons">Raised buttons</string>
    <string name="fragment_buttons_flat_buttons">Flat buttons</string>
    <string name="fragment_buttons_floating_action_button">Floating action button</string>

    <!-- Cards Fragment -->
    <string name="fragment_cards">Cards</string>
    <string name="fragment_cards_txt">A card is a piece of paper that contains unique related data; for example, a photo, text, and link all about a single subject. Cards are typically an entry point to more complex and detailed information.
        \n\nCards have a constant width and variable height. The maximum height is limited to what can fit within a single view on a platform, but it can temporarily expand as needed (for example, to display a comment field). Cards do not flip to reveal information on their back.
    </string>

    <!-- Chips Fragment -->
    <string name="fragment_chips">Chips</string>
    <string name="fragment_chips_txt">Chips are small blocks that represent a complex entity, such as a calendar event or contact. They can contain a photo, short title string (truncated if necessary), and other brief information. Chips are easily manipulated through drag and drop. Touching them invokes the full entity view in a card or full screen view or invokes a menu of options related to that chip’s entity.
        \n\nAnimations invoking and invoked from chips should resize the chip material between entity views for element persistence.
    </string>

    <!-- Dialogs Fragment -->
    <string name="fragment_dialogs">Dialogs</string>
    <string name="fragment_dialogs_txt">Dialogs inform users about critical information, require users to make decisions, or encapsulate multiple tasks within a discrete process. Use dialogs sparingly because they are interruptive in nature—their sudden appearance forces users to stop their current task and refocus on the dialog content. Not every choice, setting, or detail warrants such interruption and prominence.
        \n\nAlternatives to dialogs include simple menus or inline expansion within the current content area. Both approaches present information or options while maintaining the current context and are less disruptive.
    </string>

    <!-- Dividers Fragment -->
    <string name="fragment_dividers">Dividers</string>
    <string name="fragment_dividers_txt">Dividers group and separate content within lists and page layouts. The divider is a thin rule, lightweight yet sufficient to distinguish content visually and spatially.</string>

    <!-- Grids Fragment -->
    <string name="fragment_grids">Grids</string>
    <string name="fragment_grids_txt">Grid lists are an alternative to standard list views. Grid lists are distinct from grids used for layouts and other visual presentations.</string>

    <!-- Lists Fragment -->
    <string name="fragment_lists">Lists</string>
    <string name="fragment_lists_txt">Lists present multiple line items in a vertical arrangement as a single continuous element.</string>

    <!-- List Controls Fragment -->
    <string name="fragment_list_controls">List controls</string>
    <string name="fragment_list_controls_txt">List controls are icons that appear to the left or right of the list text. They indicate the state of a list item, information about a list item, or serve as an action related to the list item. Leave-behinds are list controls, which are revealed only upon swipe.</string>

    <!-- Menus Fragment -->
    <string name="fragment_menus">Menus</string>
    <string name="fragment_menus_txt">Menus allow users to take an action by selecting from a list of choices revealed upon opening a temporary, new sheet of material.</string>

    <!-- Pickers Fragment -->
    <string name="fragment_pickers">Pickers</string>
    <string name="fragment_pickers_txt">Pickers provide a simple way to select a single value from a set. Ready-to-use date and time pickers are included.
        \n\nEach picker is a dialog with a set of controls for entering the parts of the date (month, day, year) or time (hour, minute, AM/PM). Using these in your app helps ensure that a user\'s specification of a date or time input is valid and formatted correctly. The format of a time and date picker adjusts automatically to the locale, i.e. month-day-year in the US and day-month-year in other regions.
        \n\nPickers can be used inline on a form, but on mobile their relatively large footprint is best suited for display in a dialog. For inline display, consider using more compact controls such as text fields or dropdown menus.
    </string>

    <!-- Progress And Activity Fragment -->
    <string name="fragment_progress_and_activity">Progress &amp; activity</string>
    <string name="fragment_progress_and_activity_txt">Make loading content in your app as delightful and painless as possible by minimizing the amount of visual change a user sees before they can view and interact with content. Each operation should only be represented by one activity indicator—for example, one refresh operation should not display both a refresh bar and an activity circle.</string>

    <!-- Sliders Fragment -->
    <string name="fragment_sliders">Sliders</string>
    <string name="fragment_sliders_txt">Sliders let users select a value from a continuous or discrete range of values by moving the slider thumb. The smallest value is to the left, the largest to the right. Sliders can have icons to the left and right of the bar that reflect the value intensity. The interactive nature of the slider makes it a great choice for settings that reflect intensity levels, such as volume, brightness, or color saturation.</string>

    <!-- Snackbars And Toasts Fragment -->
    <string name="fragment_snackbars_and_toasts">Snackbars &amp; toasts</string>
    <string name="fragment_snackbars_and_toasts_txt">Snackbars provide lightweight feedback about an operation. They show a brief message at the bottom of the screen on mobile and lower left on desktop. Snackbars appear above all other elements on screen. Snackbars can contain an action.
        \n\nThey automatically disappear after a timeout or after user interaction elsewhere on the screen, particularly after interactions that summon a new surface or activity. Snackbars can be swiped off screen. They do not block input on the screens on which they appear. Show only one snackbar on screen at a time.
        \n\nAndroid also provides a capsule-shaped toast, primarily used for system messaging. Toasts are similar to snackbars but do not contain actions and cannot be swiped off screen.
    </string>

    <!-- Subheaders Fragment -->
    <string name="fragment_subheaders">Subheaders</string>
    <string name="fragment_subheaders_txt">Subheaders are special list tiles that delineate distinct sections of a list or grid list and are typically related to the current filtering or sorting criteria. Subheader tiles are either displayed inline with tiles or can be associated with content, for example, in an adjacent column.
        \n\nUpon scrolling, subheaders remain pinned to the top of the screen until pushed on or off screen by the next subheader.
    </string>

    <!-- Switches Fragment -->
    <string name="fragment_switches">Switches</string>
    <string name="fragment_switches_txt">Switches allow the user to select options. There are three kinds: checkboxes, radio buttons, and on/off switches.</string>

    <!-- Tabs Fragment -->
    <string name="fragment_tabs">Tabs</string>
    <string name="fragment_tabs_txt">Tabs make it easy to explore and switch between different views or functional aspects of an app or to browse categorized data sets.</string>

    <!-- Text Fields Fragment -->
    <string name="fragment_text_fields">Text fields</string>
    <string name="fragment_text_fields_txt">Text fields allow the user to input text. They can be single line, with or without scrolling, or multi-line, and can have an icon. Touching a text field places the cursor and automatically displays the keyboard. In addition to typing, text fields allow for a variety of other tasks, such as text selection (cut, copy, paste) and data lookup via auto-completion. See Patterns > Selection for text selection design.
        \n\nThe type of text field determines what kind of characters are allowed inside the field and may prompt the virtual keyboard to optimize its layout for frequently used characters. Common types for which you should optimize include number, text, email address, phone number, person’s name, username, URL, street address, credit card number, PIN, and search query.
    </string>
    <string name="fragment_text_fields_single_line_text_field">Single-line text field</string>
    <string name="fragment_text_fields_floating_labels">Floating labels</string>
    <string name="fragment_text_fields_multi_line_text_field">Multi-line text field</string>
    <string name="fragment_text_fields_full_width_text_field">Full-width text field</string>
    <string name="fragment_text_fields_character_counter">Character counter</string>
    <string name="fragment_text_fields_auto_complete_text_field">Auto-complete text field</string>
    <string name="fragment_text_fields_search_filter">Search filter</string>

    <!-- Tooltips Fragment -->
    <string name="fragment_tooltips">Tooltips</string>
    <string name="fragment_tooltips_txt">Tooltips are labels that appear on hover and focus when the user hovers over an element with the cursor, focuses on an element using a keyboard (usually through the tab key), or, in a touch UI, upon touch (without releasing). They contain textual identification for the element in question. They may also contain brief helper text regarding the function of the element. Nothing within the label can take focus.</string>

    <!-- Data Formats Fragment -->
    <string name="fragment_data_formats">Data formats</string>
    <string name="fragment_data_formats_txt">Display data such as date &amp; time in a consistent and user-friendly way. Present the information concisely and avoid unnecessary redundancy.</string>

    <!-- Errors Fragment -->
    <string name="fragment_errors">Errors</string>
    <string name="fragment_errors_txt">Errors are instances where an app fails to complete what is expected. Errors happen when:
        \n\n• The app does not understand user input.
        \n• The system or app fails.
        \n• A user intends to run incompatible operations concurrently.
        \n\nTry to prevent errors through good design. Make your app understand the user, rather than making the user have to understand the app. When an error occurs, communicate clearly about what is happening and how a user can quickly resolve it. Save and preserve as much state as possible, especially when the user has input content.
        \n\nAs with all feedback, prioritize which messages are most important, communicate through content states to avoid extraneous elements on screen, and be consistent with screen placements within and across form factors.
    </string>

    <!-- Gestures Fragment -->
    <string name="fragment_gestures">Gestures</string>
    <string name="fragment_gestures_txt">Gestures are divided into Touch Mechanics (what your fingers do on the screen) and Touch Activities (context-specific results of specific gestures in the user interface). A single touch mechanic (touch) may have multiple results depending on context (tap, cancel, enable/disable lights out), and a single touch activity (zoom in) may be achieved through multiple touch mechanics (pinch open, double touch, double-touch drag, etc.)
        \n\nNote that Drag, Swipe, and Fling gesture activities are covered in more detail in their own section due to their highly contextual results.
    </string>

    <!-- Loading Images Fragment -->
    <string name="fragment_loading_images">Loading images</string>

    <!-- Navigation Drawer Fragment -->
    <string name="fragment_navigation_drawer">Navigation drawer</string>
    <string name="fragment_navigation_drawer_txt">The navigation drawer is a common pattern found in Google apps. The navigation drawer slides in from the left. It follows the keylines and metrics for lists.</string>

    <!-- Navigational Transitions Fragment -->
    <string name="fragment_navigational_transitions">Navigational transitions</string>
    <string name="fragment_navigational_transitions_txt">Navigational transitions occur when the user is taken from one state to another within the app, such as moving from a high-level view to a detailed view or a task-completion view. Most transitions are hierarchical in nature, but non-hierarchical transitions also occur.
        \n\nThese brief moments are very important for the user experience. Consider the user’s journey carefully to determine which transition to use when. Different kinds of transitions are appropriate for various cases.
    </string>

    <!-- Scrolling Techniques Fragment -->
    <string name="fragment_scrolling_techniques">Scrolling techniques</string>

    <!-- Search Fragment -->
    <string name="fragment_search">Search</string>

    <!-- Selection Fragment -->
    <string name="fragment_selection">Selection</string>
    <string name="fragment_selection_txt">A long-press (a touch or mousedown that’s held in the same position for a moment) is the global gesture to select data. On touch devices, a two-finger touch may also be used to trigger selection.
        \n\nUsing checkboxes (or custom analogs) to initiate selection is an explicit anti-pattern for mobile. For desktop, checkboxes may be used, with the following guidelines:
        \n\n• Avoid persistently displaying checkboxes as part of each item.
        \n• When hovering on an item, display a single checkbox for that item.
        \n• After an item has been selected, display checkboxes for all remaining items in that set.
        \n\nThe use of checkboxes in contexts such as task lists or checklists where checking an item indicates completion, rather than selection, is entirely appropriate.
    </string>

    <!-- Settings Fragment -->
    <string name="fragment_settings">Settings</string>

    <!-- Swipe To Refresh Fragment -->
    <string name="fragment_swipe_to_refresh">Swipe to refresh</string>

    <!-- Accessibility Fragment -->
    <string name="fragment_accessibility">Accessibility</string>
    <string name="fragment_accessibility_txt">A product is accessible when all people — regardless of ability — can navigate it, understand it, and use it to achieve their goals. A truly successful product is accessible to the widest possible audience.
        \n\nThese general guidelines are a good starting point for designers who want to learn about accessibility. Designing fully accessible products is a complex topic that requires in-depth study. For more info, visit the Google accessibility site.
        \n\nTo ensure that your product is usable for users with disabilities, consider how users will interact with your product using assistive technologies. Imagine using your product in the following ways:
        \n\n• Without sound
        \n• Without color
        \n• With the high contrast mode enabled
        \n• With the screen magnified
        \n• With a screen reader (no visible screen)
        \n• With voice control only
        \n• With a combination of the above
    </string>

    <!-- Bidirectionality Fragment -->
    <string name="fragment_bidirectionality">Bidirectionality</string>
    <string name="fragment_bidirectionality_txt">A well-designed app supports <i>bidirectionality</i>, which means that it can be localized easily for language scripts that are written and read from right-to-left (RTL) or left-to-right (LTR). RTL scripts include Arabic, Hebrew, and Persian.
        \n\nBidirectionality affects not only text but also layout and iconography.
    </string>



    <!-- Compose Email Activity -->
    <string name="title_activity_compose_email">Compose</string>
    <string name="compose_email_hint_from">From</string>
    <string name="compose_email_hint_message">Message</string>
    <string name="compose_email_hint_subject">Subject</string>
    <string name="compose_email_hint_to">To</string>

    <!-- Developer Mode Activity -->
    <string name="title_activity_developer_mode">Developer Mode</string>

    <!-- Patterns Activity -->
    <string name="fragment_patterns_basic_displays">Basic displays</string>
    <string name="fragment_patterns_basic_1">For time, use uppercase AM or PM without periods, separated from time with a space.</string>
    <string name="fragment_patterns_basic_2">If a timestamp is within the current day, it’s generally unnecessary to show either “today”, the day or date. Only display the time in “hour:minute AM/PM” format.</string>
    <string name="fragment_patterns_basic_3">If the day is in the past or future within the current calendar year, display the abbreviated date.</string>
    <string name="fragment_patterns_basic_4">If the day is in the past or future outside of the current calendar year, display the abbreviated date and year.</string>
    <string name="fragment_patterns_basic_5">If the date is a range of time, separate with an en-dash without a space on either side.</string>
    <string name="fragment_patterns_basic_6">If both dates in a range start and end in the current year, omit the year. Otherwise, show the year on both the start and end.</string>
    <string name="fragment_patterns_basic_7">When a range shares a common AM/PM, append only on the end of the range.</string>
    <string name="fragment_patterns_basic_8">When listing the time zone, drop the leading 0 for single digits.</string>
    <string name="fragment_patterns_human_displays">Using human and relative language and approximate time</string>
    <string name="fragment_patterns_human_1">If the day is yesterday or tomorrow, use those terms</string>
    <string name="fragment_patterns_human_2">If the day is in the future and within a week, display the unabbreviated day of the week.</string>
    <string name="fragment_patterns_human_3">If a word alternative helps understanding or describes a time-of-day preset, display that alternative.</string>
    <string name="fragment_patterns_human_4">If absolute time isn’t necessary for specificity or comparison, you may choose to display approximate relative times.\nDon’t combine units (e.g. “1 hour 32 minutes ago”). Instead, round down to the most recent largest unit (e.g. “1 hour ago”).</string>
    <string name="fragment_patterns_human_5">Relative language may not always be appropriate, e.g. current date in a clock app, or the specific time of an event or alarm. In these cases, use absolute time.</string>
    <string name="fragment_patterns_modular_displays">Be modular</string>
    <string name="fragment_patterns_modular_1">Typically, future settings should append time to a day or date.</string>
    <string name="fragment_patterns_modular_2">When a past time is necessary, such as a triggered reminder, display both date and time.</string>
    <string name="fragment_patterns_modular_3">When the day of week is necessary, such as on a calendar invite, display the abbreviated day separated by a comma.</string>
    <string name="fragment_patterns_modular_4">When it’s an event in the distant past, omit the time.</string>
    <string name="fragment_patterns_modular_5">Use HH:MM:SS to show the duration of a recording, like audio or video. If hours or seconds don’t apply, then omit them.</string>
    <string name="fragment_patterns_brief_displays">Be modular</string>
    <string name="fragment_patterns_brief_1">Always abbreviate months, with single or double digit dates.</string>
    <string name="fragment_patterns_brief_2">Abbreviate days of the week when combined with a time.</string>
    <string name="fragment_patterns_brief_3">If real estate is limited (such as with timestamps, labels on graphs, durations, etc.) abbreviate units, using numerical versions and/or by removing the “:00”:</string>
    <string name="fragment_patterns_brief_4">If truncation of “tomorrow” or “yesterday” happens repeatedly, do not abbreviate. Instead, use the month date format.</string>

    <!-- Register Application Activity -->
    <string name="title_activity_register_application">Application</string>
    <string name="register_application_hint_title">Title</string>
    <string name="register_application_hint_price">Price</string>
    <string name="register_application_hint_location">Location (optional)</string>
    <string name="register_application_hint_description">Description</string>

    <!-- Register Contact Activity -->
    <string name="title_activity_register_contact">Contact</string>
    <string name="register_contact_hint_name">Full Name</string>
    <string name="register_contact_hint_phone">Phone number</string>
    <string name="register_contact_hint_email">Email</string>
    <string name="register_contact_hint_address">Address</string>
    <string name="register_contact_hint_ringtone">Ringtone</string>
    <string name="register_contact_hint_add_note">Add note</string>

    <!-- Register Event Activity -->
    <string name="title_activity_register_event">Event</string>
    <string name="register_event_hint_event_name">Event name</string>
    <string name="register_event_hint_from">From</string>
    <string name="register_event_hint_location">Location</string>
    <string name="register_event_hint_to">To</string>
    <string name="register_event_hint_timezone">Timezone</string>
    <string name="register_event_txt_all_day">All day</string>

    <!-- Register Note Activity -->
    <string name="title_activity_register_note">Note</string>
    <string name="register_note_hint_title">Title</string>
    <string name="register_note_hint_description">Description</string>
    <string name="register_note_hint_extra">More descriptive text</string>

    <!-- Searchable Activity -->
    <string name="title_activity_searchable">Searchable</string>
    <string name="searchable_hint_search">Search %1$s</string>

    <!-- Settings Activity -->
    <string name="title_activity_settings">Settings</string>

    <!-- System Icons Activity -->
    <string name="title_activity_system_icons">System icons</string>

    <!-- Tabs Activity -->
    <string name="title_activity_tabs">Page title</string>

    <!-- Accessibility Description -->
    <string name="content_descr_drawer_close">Close navigation drawer</string>
    <string name="content_descr_drawer_open">Open navigation drawer</string>
    <string name="content_descr_rich_media">Rich media</string>

</resources>
